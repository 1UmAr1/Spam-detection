install.packages("cran")
install.packages("Cran")
install.packages("CRAN")
cran
install.packages("kernlab")
head(train$spam)
library(kernlab)
data(spam)
dim(spam)
install.packages("rpart")
install.packages(c("backports", "data.table", "later", "rmarkdown", "xfun"))
library(kernlab)
install.packages("neuralnet")
Rtools
library(kernlab)
data(spam)
#look at the dimensions
dim(spam)
Rtoos
Rtools
#generating binomial random variables
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
#here we are assingning 2296 in the training set and 2305 in the test set
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
dim(trainSpam)
library(neuralnet)
which(is.na(spam))
names(trainSpam)
head(trainSpam)
head(trainSpam)
table(trainSpam$type)
#ploting to take a better look at spams
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
?corrplot
corrplot::colorlegend()
corrplot(cor(trainSpam,
method = "square", type = "full", bg = "steelblue2")
library(corrplot)
corrplot(cor(trainSpam,
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam[,-c(1)]),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam[,c(1)]),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam[1,c(50)]),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam$type),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(trainSpam$type, trainSpam$capitalAve),
method = "square", type = "full", bg = "steelblue2")
tr <- as.numeric(trainSpam$type)
corrplot(cor(tr, trainSpam$capitalAve),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(spam),
method = "square", type = "full", bg = "steelblue2")
corrplot(cor(tr),
method = "square", type = "full", bg = "steelblue2")
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
#plot for relation between predictors
plot(log10(trainSpam[,1: 4]+1))
#performing heirarchical clustering i.e
#assigning each item to cluster which gives us N clusters
#each containing one item
#then finding the most similar pair of clusters and merging them
#into a single cluster and recurse'
hCluster <- hclust(dist(t(trainSpam[, 1:57]))
#performing heirarchical clustering i.e
#assigning each item to cluster which gives us N clusters
#each containing one item
#then finding the most similar pair of clusters and merging them
#into a single cluster and recurse'
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hCluster <- hclust(dist(t(log10(trainSpam[, 1:57]))))
hCluster <- hclust(dist(t log10(trainSpam[, 1:57])))
hCluster <- hclust(dist(t (log10(trainSpam[, 1:57]))))
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
hCluster <- hclust(dist(t(log10(trainSpam[, 1:55]))))
hCluster <- hclust(dist(t(trainSpam[, 1:55])))
